import { Request, Response } from "express";
import { findById as findPlaylistById } from "../../../database/models/playlist";
import internalErrorHandler from "../../errorHandlers/internalErrorHandler";
import notFoundErrorHandler from "../../errorHandlers/notFoundErrorHandler";
import { mongoose } from "../../../database/connection";
import accessDeniedErrorHandler from "../../errorHandlers/accessDeniedErrorHandler";
import { getUserIdFromToken } from "../../auth/getUser";

import sendPlaylistResponse from "./sendPlaylistResponse";

export default (req: Request, res: Response): void => {
	const id: string = req.params.id;
	const name: string | undefined = req.body.name;
	const songs: string[] | undefined = req.body.songs;
	const description: string | undefined = req.body.description;
	const features: string[] | undefined = req.body.features;
	const privacy: boolean | undefined = req.body.private;

	getUserIdFromToken(req.header("token") ?? "INVALID").then(userId => {
		findPlaylistById(id, userId).then(playlist => {
			if (playlist) {
				if (name) {
					playlist.name = name;
				}
				if (songs) {
					playlist.songs = songs.map(song => new mongoose.Types.ObjectId(song));
				}
				if (description) {
					playlist.description = description;
				}
				if (features) {
					playlist.features = features.map(song => new mongoose.Types.ObjectId(song));
				}
				playlist.private = privacy ?? playlist.private;

				playlist.autoGenerated = false;
				playlist.save().then(results => {
					sendPlaylistResponse([results], req, res);
				}).catch(internalErrorHandler(req, res));
			} else {
				notFoundErrorHandler(req, res)("playlist", id);
			}
		}).catch(internalErrorHandler(req, res));
	}).catch(() => {
		accessDeniedErrorHandler(req, res)(id);
	});
};
