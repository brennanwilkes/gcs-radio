import axios from "axios";
import {Playlist} from "../../types/playlist";
import {User} from "../../types/user";
import jscookie from "js-cookie";
import arrayshuffle from "array-shuffle";
import Response, {HasResponse, axiosErrorResponseHandler, successResponseHandler, errorResponseHandler} from "../Response/Response";
import NavBar from "../Navbar/Navbar";
import HrWrapper from "../HrWrapper/HrWrapper";
import PlaylistView from "../PlaylistView/PlaylistView";
import {FaSpotify, FaApple} from "react-icons/fa";
import musicKit from "../musicKitSDK/musicKitSDK";

import "./dashboard.scss";

import {useTranslation} from "react-i18next";

const Connected = () => <>{useTranslation("common").t("dashboard.connected")}</>
const Disconnected = () => <>{useTranslation("common").t("dashboard.disconnected")}</>
const Disconnect = () => <>{useTranslation("common").t("dashboard.disconnect")}</>
const Signout = () => <>{useTranslation("common").t("dashboard.signout")}</>
const Create = () => <>{useTranslation("common").t("dashboard.create")}</>
const Playlists = () => <>{useTranslation("common").t("dashboard.playlists")}</>
const Made = () => <>{useTranslation("common").t("dashboard.made")}</>
const Generate = () => <>{useTranslation("common").t("dashboard.generate")}</>

interface IProps {}
interface IState extends HasResponse{
	playlists: Playlist[],
	user?: User,
	fromSpotify: Playlist[]
}

export default class Dashboard extends React.Component<IProps, IState> {

	constructor(props: IProps){
		super(props);
		this.deletePlaylist = this.deletePlaylist.bind(this);

		this.state = {
			playlists: [],
			fromSpotify: []
		}
	}

	deletePlaylist(playlist: Playlist, i: number){
		axios.delete(`../api/v1/playlists/${playlist.id}`).then(() => {
			this.setState({
				playlists: arrayshuffle(this.state.playlists.filter((_p:Playlist, ii: number) => i !== ii))
			});
			successResponseHandler(this)(`Deleted ${playlist.details?.name ?? playlist.id}`);
		}).catch(axiosErrorResponseHandler);
	}

	componentDidMount(){
		$("body").css("cursor","wait");

		axios.get("/auth").then(resp => {
			this.setState({
				user: resp.data.users[0]
			});

			axios.get("/api/v1/playlists?noAutoGenerated=1&limit=100").then(resp2 => {
				this.setState({
					playlists: resp2.data.playlists.filter((playlist: Playlist) => playlist.details?.user === resp.data.users[0].id )
				});
			}).catch(axiosErrorResponseHandler(this)).finally(() => {
				if(this.state.playlists.length < 1){
					$("body").css("cursor", "inherit");
				}
			});
		}).catch(() => {
			jscookie.remove("jwt");
			jscookie.remove("sat");
			jscookie.remove("srt");
			window.location.href = "../login";
		});
	}

	render(){

		const spotifyConnected = !!this.state.user?.spotifyRefreshToken;
		const musicKitConnected = !!this.state.user?.musicKitToken;

		return <>
			<NavBar />
			<div className="Dashboard container-lg mt-md-5">
				<div className="col-12 col-md-5 mr-md-4 mb-2 d-inline-flex flex-column">
					<button
						disabled={spotifyConnected}
						className={`btn btn-lg btn-${spotifyConnected ? "gcs-elevated" : "gcs-faded" }`}
						onClick={() => {
							window.location.href = "../auth/spotify";
						}}
					><div className="d-flex justify-content-center"><FaSpotify size={30} /> {
						spotifyConnected ? <Connected /> : <Disconnected />
					}</div></button>
					<a
						className={`h6 mt-1 d-inline-block ${spotifyConnected ? "" : "anchorDisabled"}`}
						onClick={() => {
							axios.delete("../auth/spotify").then(() => {
								successResponseHandler(this)(`Spotify Disconnected from ${this.state.user?.email}`);
								jscookie.remove("sat");
								jscookie.remove("srt");
								axios.get("/auth").then(resp => {
									this.setState({
										user: resp.data.users[0]
									});
								});
							}).catch(axiosErrorResponseHandler(this));
					}}><Disconnect /></a>
				</div>

				<div className="col-12 col-md-5 ml-md-4 mb-2 d-inline-flex flex-column">
					<button
						disabled={musicKitConnected}
						className={`btn btn-lg btn-${musicKitConnected ? "gcs-elevated" : "gcs-faded" }`}
						onClick={() => {
							musicKit().then(kit => {
								return kit.authorize();
							}).then(token => {
								return axios.patch(`../auth/musicKit?musicKitToken=${encodeURIComponent(token)}`).catch(axiosErrorResponseHandler(this));
							}).then(data => {
								if(data && data.data?.users?.length){
									jscookie.set("mkt", data.data.users[0].musicKitToken);
									this.setState({
										user: data.data.users[0]
									});
									console.dir(data.data);
								}
								else if(data){
									errorResponseHandler(this)("Something went wrong");
								}
							}).catch(errorResponseHandler(this));
						}}
					><div className="d-flex justify-content-center"><FaApple size={30} /> {
						musicKitConnected ? "Apple Music Connected" : "Connect Apple Music"
					}</div></button>
					<a
						className={`h6 mt-1 d-inline-block ${musicKitConnected ? "" : "anchorDisabled"}`}
						onClick={() => {
							axios.delete("../auth/musicKit").then(() => {
								successResponseHandler(this)(`Apple Music Disconnected from ${this.state.user?.email}`);
								jscookie.remove("mkt");
								axios.get("/auth").then(resp => {
									this.setState({
										user: resp.data.users[0]
									});
								});
							}).catch(axiosErrorResponseHandler(this));
					}}><Disconnect /></a>
				</div>

				<div className="col-12 col-md-5 mr-md-4 mb-2 d-inline-flex flex-column">
					<button
						className="btn btn-lg btn-gcs-bright"
						onClick={() => {
							window.location.href = "../build";
						}}
					><Create />
					</button>
					<a
						className="text-gcs-elevated"
						href="../login"
						onClick={() => {
							jscookie.remove("jwt");
							jscookie.remove("sat");
							jscookie.remove("srt");
							window.location.href = "../login";
					}}><Signout /></a>
				</div>

				<div className="col-12 col-md-5 ml-md-4 mb-2 d-inline-flex flex-column">
					<button
						className={`btn btn-lg btn-gcs-${this.state.fromSpotify.length === 0 && spotifyConnected ? "faded" : "elevated"}`}
						disabled={!(this.state.fromSpotify.length === 0 && spotifyConnected)}
						onClick={() => {
							$("body").css("cursor","wait");
							axios.post("/api/v1/playlists/made-for-me?limit=30").then(response => {
								this.setState({
									fromSpotify: response.data.playlists
								});
							}).catch(axiosErrorResponseHandler(this)).finally(() => {
								$("body").css("cursor","inherit");
							});
					}}><Generate /></button>
				</div>

				<HrWrapper style={{
					borderBottomColor: "var(--gcs-faded)",
					marginTop: "2vh"
				}} children={
					<h2 className="text-gcs-faded" ><Playlists /></h2>
				} />
				<div>
				{
					this.state.playlists.map((playlist, i) => <PlaylistView
						first={i===0}
						last={i===this.state.playlists.length - 1}
						key={`${playlist.id}-${i}`}
						playlist={playlist}
						keyExtension={i}
						deleteCallback={this.deletePlaylist}
					/>)
				}
				{
				this.state.user?.spotifyRefreshToken? <>
					<HrWrapper style={{
						borderBottomColor: "var(--gcs-faded)"
					}} children={
						<h2 className="text-gcs-faded" ><Made /></h2>
					} />
					{

					this.state.fromSpotify.length === 0 ? <>
						<button className="btn btn-lg mt-3 mb-5 btn-gcs-faded" onClick={() => {
							$("body").css("cursor","wait");
							axios.post("/api/v1/playlists/made-for-me?limit=30").then(response => {
								this.setState({
									fromSpotify: response.data.playlists
								});
							}).catch(axiosErrorResponseHandler(this)).finally(() => {
								$("body").css("cursor","inherit");
							});
						}}><Generate /></button>
					</> : <>
					{
						this.state.fromSpotify.map((playlist, i) => <PlaylistView
							first={i===0}
							last={i===this.state.playlists.length - 1}
							key={`${playlist.id}-${i}`}
							playlist={playlist}
							keyExtension={i * -1}
						/>)
					}
					</>
				}</> : <></>
				}
				</div>
			</div>
			<Response response={this.state} />
		</>
	}
}
