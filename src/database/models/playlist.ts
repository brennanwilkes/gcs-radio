// Brennan Wilkes

// Import and setup
import { mongoose } from "../connection";
import { Playlist, PlaylistObj } from "../../types/playlist";
import { SongObjFromQuery, SongWithId } from "../../types/song";
import { SongDoc } from "./song";
import { Query } from "mongoose";
const Schema = mongoose.Schema;

const PlaylistSchema = new Schema({
	songs: [{ type: [mongoose.Schema.Types.ObjectId], ref: "songs" }],
	user: { type: mongoose.Schema.Types.ObjectId, ref: "users" },
	name: { type: String },
	description: { type: String },
	autoGenerated: { type: mongoose.Schema.Types.Boolean },
	features: [{ type: [mongoose.Schema.Types.ObjectId], ref: "songs" }],
	private: { type: mongoose.Schema.Types.Boolean }
});

export interface PlaylistDoc extends mongoose.Document {
	songs: mongoose.Types.ObjectId[],
	user: mongoose.Types.ObjectId,
	name: string,
	description: string,
	autoGenerated: boolean,
	features: mongoose.Types.ObjectId[]
	private: boolean
}

const PlaylistModel = mongoose.model<PlaylistDoc>("playlist", PlaylistSchema);
mongoose.model<PlaylistDoc>("playlists", PlaylistSchema);
export default PlaylistModel;

export function PlaylistModelFromPlaylist (playlist: Playlist): InstanceType<typeof PlaylistModel> {
	return new PlaylistModel({
		songs: playlist.songs.filter(song => song.id).map(song => new mongoose.Schema.Types.ObjectId(song.id as string)),
		user: playlist.details?.user ? new mongoose.Schema.Types.ObjectId(playlist.details?.user) : undefined,
		name: playlist.details?.name,
		description: playlist.details?.description,
		features: playlist.details?.features ? playlist.details.features.filter((song): song is SongWithId => !!song.id).map(song => new mongoose.Schema.Types.ObjectId(song.id)) : [],
		private: playlist.private,
		autoGenerated: playlist.details?.autoGenerated
	});
}

export function PlaylistObjFromQuery (docs: PlaylistDoc): Playlist {
	const filtered: SongDoc[] = (docs.songs as any[]).filter((song): song is SongDoc => song !== null);
	const filteredFeatures: SongDoc[] = (docs.features as any[]).filter((song): song is SongDoc => song !== null);

	return new PlaylistObj(
		filtered.map(song => new SongObjFromQuery(song)),
		String(docs._id),
		(docs.user && docs.name)
			? {
				user: String(docs.user),
				name: docs.name,
				description: docs.description ?? "",
				features: filteredFeatures.map(song => new SongObjFromQuery(song)),
				autoGenerated: docs.autoGenerated
			}
			: undefined,
		docs.private
	);
}

export const findById = (id: string, user?: string): Query<PlaylistDoc | null, PlaylistDoc> => {
	return (user
		? PlaylistModel.findOne({
			_id: new mongoose.Types.ObjectId(id),
			user: new mongoose.Types.ObjectId(user)
		})
		: PlaylistModel.findOne({
			_id: new mongoose.Types.ObjectId(id)
		})).populate({
		path: "songs",
		populate: { path: "song" }
	})
		.populate({
			path: "features",
			populate: { path: "song" }
		});
};

export { PlaylistSchema };
