// Brennan Wilkes

// Import and setup
import { mongoose } from "../connection";
import { Playlist, PlaylistObj } from "../../types/playlist";
import { SongObjFromQuery } from "../../types/song";
import SongModel, { SongDoc } from "./song";
import { Query } from "mongoose";
const Schema = mongoose.Schema;

const PlaylistSchema = new Schema({
	songs: [{ type: mongoose.Schema.Types.ObjectId, ref: "songs" }],
	user: { type: mongoose.Schema.Types.ObjectId, ref: "users" },
	name: { type: String },
	description: { type: String },
	autoGenerated: { type: mongoose.Schema.Types.Boolean },
	features: [{ type: mongoose.Schema.Types.ObjectId, ref: "songs" }],
	private: { type: mongoose.Schema.Types.Boolean }
});

export interface PlaylistDoc extends mongoose.Document {
	songs: mongoose.Types.ObjectId[],
	user: mongoose.Types.ObjectId,
	name: string,
	description: string,
	autoGenerated: boolean,
	features: mongoose.Types.ObjectId[]
	private: boolean
}

const PlaylistModel = mongoose.model<PlaylistDoc>("playlist", PlaylistSchema);
export default PlaylistModel;

export function PlaylistModelFromPlaylist (playlist: Playlist): InstanceType<typeof PlaylistModel> {
	return new PlaylistModel({
		songs: playlist.songs.filter(song => song.id).map(song => new mongoose.Schema.Types.ObjectId(song.id as string)),
		user: playlist.details?.user ? new mongoose.Schema.Types.ObjectId(playlist.details?.user) : undefined,
		name: playlist.details?.name,
		description: playlist.details?.description,
		features: playlist.details?.features ? playlist.details.features.map(song => new mongoose.Schema.Types.ObjectId(song)) : [],
		private: playlist.private,
		autoGenerated: playlist.details?.autoGenerated
	});
}

export function PlaylistObjFromQuery (docs: PlaylistDoc, renderSongs = true): Promise<Playlist> {
	return new Promise<Playlist>((resolve, reject) => {
		const songs = renderSongs ? docs.songs.map(id => SongModel.findOne({ _id: id })) : [];
		Promise.all(songs).then(results => {
			if (!renderSongs || (results && results.length > 0)) {
				const filtered: SongDoc[] = results.filter((song): song is SongDoc => song !== null);
				resolve(new PlaylistObj(
					filtered.map(song => new SongObjFromQuery(song)),
					String(docs._id),
					(docs.user && docs.name)
						? {
							user: String(docs.user),
							name: docs.name,
							description: docs.description ?? "",
							features: docs.features.map(song => String(song)),
							autoGenerated: docs.autoGenerated
						}
						: undefined,
					docs.private
				));
			} else {
				reject(new Error("No results found!"));
			}
		}).catch(reject);
	});
}

export const findById = (id: string, user?: string): Query<PlaylistDoc | null, PlaylistDoc> => {
	return user
		? PlaylistModel.findOne({
			_id: new mongoose.Types.ObjectId(id),
			user: new mongoose.Types.ObjectId(user)
		})
		: PlaylistModel.findOne({
			_id: new mongoose.Types.ObjectId(id)
		});
};

export { PlaylistSchema };
